 // Deserialize program state
    let mut program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify admin authorization
    if program_state.admin != *admin_account.key {
        msg!("Only the admin can update parameters");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Validate parameters (basic validation only)
    let total_deductions = lp_contribution_rate + admin_fee_rate + yos_cashback_rate + swap_fee_rate + referral_rate;
    if total_deductions > 10000 {
        msg!("Total of all rates cannot exceed 100% (10000 basis points)");
        return Err(ProgramError::InvalidArgument);
    }
    
    // Update program state
    program_state.lp_contribution_rate = lp_contribution_rate;
    program_state.admin_fee_rate = admin_fee_rate;
    program_state.yos_cashback_rate = yos_cashback_rate;
    program_state.swap_fee_rate = swap_fee_rate;
    program_state.referral_rate = referral_rate;
    
    // Serialize updated program state
    program_state.serialize(&mut &mut program_state_account.data.borrow_mut()[..])?;
    
    msg!("Parameters updated successfully");
    Ok(())
}

// Buy and distribute YOT tokens with liquidity contribution and YOS cashback
// Implements buy_and_distribute from the Anchor smart contract
fn process_buy_and_distribute(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    amount: u64,
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let user = next_account_info(accounts_iter)?;
    let vault_yot = next_account_info(accounts_iter)?;
    let user_yot = next_account_info(accounts_iter)?;
    let liquidity_yot = next_account_info(accounts_iter)?;
    let yos_mint = next_account_info(accounts_iter)?;
    let user_yos = next_account_info(accounts_iter)?;
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;
    let rent_sysvar = next_account_info(accounts_iter)?;
    
    // Verify user is a signer
    if !user.is_signer {
        msg!("User must sign BuyAndDistribute instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Get program state to access rates
    let program_state_account = next_account_info(accounts_iter)?;
    let (expected_program_state, _) = find_program_state_address(program_id);
    if expected_program_state != *program_state_account.key {
        msg!("Invalid program state account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    let program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify mint addresses
    if program_state.yos_mint != *yos_mint.key {
        msg!("Invalid YOS mint address");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Calculate distribution amounts using rates from program state
    // Default: 75% to user, 20% to liquidity, 5% to YOS cashback
    let liquidity_amount = (amount * program_state.lp_contribution_rate) / 10000; // 20%
    let cashback_amount = (amount * program_state.yos_cashback_rate) / 10000;     // 5%
    let user_amount = amount - liquidity_amount - cashback_amount;                // 75%
    
    msg!("Distribution amounts:");
    msg!("Total: {}", amount);
    msg!("User portion: {}", user_amount);
    msg!("Liquidity portion: {}", liquidity_amount);
    msg!("YOS cashback: {}", cashback_amount);
    
    // Check and initialize liquidity contribution account if needed
    let (expected_liq_contrib, liq_contrib_bump) = find_liquidity_contribution_address(user.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Initialize liquidity contribution account if it doesn't exist
    if liquidity_contribution_account.data_is_empty() {
        msg!("Creating new liquidity contribution account");
        let space = 32 + 8 + 8 + 8 + 8; // pubkey + 4 u64/i64 fields
        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(space);
        