/ Auto-distribute weekly YOS rewards based on liquidity contribution
// This can be called by anyone on behalf of a user after the 7-day waiting period
fn process_claim_weekly_reward(
    program_id: &Pubkey, 
    accounts: &[AccountInfo]
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let caller = next_account_info(accounts_iter)?; // This could be any caller (admin, cron job, or user themselves)
    let user_key = next_account_info(accounts_iter)?; // The user who will receive the rewards
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let yos_mint = next_account_info(accounts_iter)?;
    let user_yos = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    
    // Verify caller is a signer
    if !caller.is_signer {
        msg!("Caller must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify liquidity contribution account belongs to the user
    let (expected_liq_contrib, _) = find_liquidity_contribution_address(user_key.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account for this user");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize contribution account
    let mut contribution = LiquidityContribution::try_from_slice(
        &liquidity_contribution_account.data.borrow()
    )?;
    
    // Verify the contribution belongs to the specified user
    if contribution.user != *user_key.key {
        msg!("Contribution account doesn't match the specified user");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check if contribution amount is valid
    if contribution.contributed_amount == 0 {
        msg!("No liquidity contribution to distribute rewards from");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check 7-day waiting period
    let clock = Clock::get()?;
    let now = clock.unix_timestamp;
    let elapsed = now - contribution.last_claim_time;
    
    const SECONDS_PER_WEEK: i64 = 604800; // 7 days
    if elapsed < SECONDS_PER_WEEK {
        msg!("Too early to distribute rewards. Must wait 7 days between distributions.");
        msg!("Last distribution: {}, Now: {}, Elapsed: {}/{} seconds", 
            contribution.last_claim_time, now, elapsed, SECONDS_PER_WEEK);
        return Err(ProgramError::InvalidInstructionData);
    }
    
    // Calculate weekly reward (1/52 of yearly reward - 100% APR)
    // 100% APR means weekly rate is ~1.92%
    let weekly_reward = (contribution.contributed_amount * 192) / 10000; // 1.92%
    msg!("Calculating weekly reward: {} * 1.92% = {}", 
        contribution.contributed_amount, weekly_reward);
    
    // Find PDA for mint authority
    let (mint_authority, mint_authority_bump) = Pubkey::find_program_address(
        &[b"authority"],
        program_id,
    );
    
    // Mint YOS rewards directly to user's account
    invoke_signed(
        &token_instruction::mint_to(
            token_program.key,
            yos_mint.key,
            user_yos.key,
            &mint_authority,
            &[],
            weekly_reward,
        )?,
        &[
            yos_mint.clone(),
            user_yos.clone(),
            token_program.clone(),
        ],
        &[&[b"authority", &[mint_authority_bump]]],
    )?;
    
    // Update contribution record
    contribution.last_claim_time = now;
    contribution.total_claimed_yos += weekly_reward;
    
    // Serialize the updated contribution data
    contribution.serialize(&mut &mut liquidity_contribution_account.data.borrow_mut()[..])?;
    
    msg!("Weekly reward of {} YOS automatically distributed to user {}", weekly_reward, user_key.key);
    Ok(())
}
