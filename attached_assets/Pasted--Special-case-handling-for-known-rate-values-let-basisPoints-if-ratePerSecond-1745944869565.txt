   // Special case handling for known rate values
        let basisPoints;
        if (ratePerSecond === 0.0000125) {
          // Special case: 0.0000125% per second = 120000 basis points
          basisPoints = 120000;
          console.log("Using special case: 0.0000125% = 120000 basis points");
        } else if (ratePerSecond === 0.00000125) {
          // Special case: 0.00000125% per second = 12000 basis points
          basisPoints = 12000;
          console.log("Using special case: 0.00000125% = 12000 basis points");
        } else if (ratePerSecond === 0.000000125) {
          // Special case: 0.000000125% per second = 1200 basis points
          basisPoints = 1200;
          console.log("Using special case: 0.000000125% = 1200 basis points");
        } else {
          // Make sure we get a valid basis point value (between 1 and 1,000,000)
          basisPoints = Math.round(ratePerSecond * 9600000);
          
          // Ensure the basis points are within valid range
          if (basisPoints < 1) basisPoints = 1;
          if (basisPoints > 1000000) basisPoints = 1000000;
          
          console.log(`Using dynamic calculation: ${ratePerSecond}% × 9,600,000 = ${basisPoints} basis points`);
        }
        
        console.log("Final basis points for blockchain:", basisPoints);
        
        // Just pass the values directly to the blockchain function
        // Don't do any conversions or transformations - keep it simple
        console.log("Harvest threshold (direct value):", harvestThreshold);
        
        // Use default values if stake/unstake thresholds are not provided
        const stakeThresholdValue = stakeThreshold ?? 10;
        const unstakeThresholdValue = unstakeThreshold ?? 10;
        
        // Log the values we're sending
        console.log("Sending direct values to blockchain:", {
          basisPoints,
          harvestThreshold,
          stakeThresholdValue,
          unstakeThresholdValue
        });
        
        // Call the blockchain function to update parameters
        const signature = await updateStakingParameters(
          wallet, 
          basisPoints,                // basis points
          harvestThreshold,           // harvest threshold (direct value)
          stakeThresholdValue,        // stake threshold (direct value)
          unstakeThresholdValue       // unstake threshold (direct value)
        );
        
        console.log("Update parameters transaction signature:", signature);
        
        // Return signature and new values for processing in onSuccess
        return { 
          signature,
          ratePerSecond,
          harvestThreshold,
          stakeThreshold: stakeThresholdValue,
          unstakeThreshold: unstakeThresholdValue
        };
      } catch (err) {
        console.error("Error updating staking parameters:", err);
        throw err;
      }
    },
    onSuccess: (result) => {
      // Invalidate queries to trigger refetch
      queryClient.invalidateQueries({ queryKey: ['staking', 'rates'] });
      
      // Construct a complete message with all the updated parameters
      const successMessage = `
        Successfully updated staking parameters:
        • Rate: ${result.ratePerSecond}% per second
        • Harvest Threshold: ${result.harvestThreshold} YOS
        ${result.stakeThreshold ? `• Stake Threshold: ${result.stakeThreshold} YOT` : ''}
        ${result.unstakeThreshold ? `• Unstake Threshold: ${result.unstakeThreshold} YOT` : ''}
      `;
      
      toast({
        title: "Staking Parameters Updated",
        description: successMessage.trim(),
      });
    },
    onError: (error: Error) => {
      const errorMessage = error.message || "Unknown error occurred";
      
      // Handle specific error messages with user-friendly explanations
      if (errorMessage.includes("not admin")) {
        toast({
          title: "Not Authorized",
          description: "Only the admin wallet can update staking parameters.",
          variant: 'destructive',
        });
      } else {
        toast({
          title: 'Update Failed',
          description: errorMessage,
          variant: 'destructive',
        });
      }
      
      console.error("Detailed parameter update error:", error);
    }
  });
  
  // Load global staking statistics periodically
  useEffect(() => {
    const loadGlobalStats = async () => {
      console.log("Fetching global stats with React Query...");
      try {
        const stats = await getGlobalStakingStats();
        console.log("Updated global stats from query:", stats);
        setGlobalStats(stats);
      } catch (error) {
        console.error("Error fetching global staking stats:", error);
        // Keep last valid stats instead of setting defaults
      }
    };
    
    // Load stats immediately and then periodically
    loadGlobalStats();
    const interval = setInterval(loadGlobalStats, 60000); // Refresh every minute
    
    return () => clearInterval(interval);
  }, []);
  
  return {
    stakingInfo: stakingInfo || {
      stakedAmount: 0,
      startTimestamp: 0,
      lastHarvestTime: 0,
      totalHarvested: 0,
      rewardsEarned: 0
    },
    stakingRates: stakingRates || {
      stakeRatePerSecond: 0,
      harvestThreshold: 0,
      dailyAPR: 0,
      weeklyAPR: 0,
      monthlyAPR: 0,
      yearlyAPR: 0,
      dailyAPY: 0,
      weeklyAPY: 0,
      monthlyAPY: 0,
      yearlyAPY: 0
    },
    globalStats,
    isLoadingStakingInfo,
    isLoadingRates,
    stakingError,
    ratesError,
    stakeMutation,
    unstakeMutation,
    harvestMutation,
    updateStakingSettingsMutation,
    refetchStakingInfo,
    refetchRates
  };
}