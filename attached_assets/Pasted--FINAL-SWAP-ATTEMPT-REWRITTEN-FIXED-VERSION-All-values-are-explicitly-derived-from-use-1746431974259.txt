
/**
 * FINAL SWAP ATTEMPT - REWRITTEN & FIXED VERSION
 * All values are explicitly derived from user-provided logs.
 */

import {
  Connection,
  PublicKey,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
  SYSVAR_RENT_PUBKEY,
  SystemProgram,
  Keypair,
} from '@solana/web3.js';

// ---------------------- CONSTANTS ----------------------

const PROGRAM_ID = new PublicKey('SMddVoXz2hF9jjecS5A1gZLG8TJHo34MJZuexZ8kVjE');
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
const SYSTEM_PROGRAM_ID = new PublicKey('11111111111111111111111111111111');

// User wallet and token accounts
const USER_WALLET = new PublicKey('AAyGRyMnFcvfdf55R7i5Sym9jEJJGYxrJnwFcq5QMLhJ');
const USER_YOT_ACCOUNT = new PublicKey('8ufUyc9yA5j2uJqHRwxi7XZZR8gKg8dwKBg2J168yvk4');
const USER_YOS_ACCOUNT = new PublicKey('8QGzzUxJ5X88LwMW6gBd7zc5Re6FbjHhFv52oj5WMfSz');

// Program state and authority accounts
const PROGRAM_STATE = new PublicKey('2sR6kFJfCa7oG9hrMWxeTK6ESir7PNZe4vky2JDiNrKC');
const PROGRAM_AUTHORITY = new PublicKey('Au1gRnNzhtN7odbtUPRHPF7N4c8siwePW8wLsD1FmqHQ');
const POOL_AUTHORITY = new PublicKey('7m7RAFhzGXr4eYUWUdQ8U6ZAuZx6qRG8ZCSvr6cHKpfK');

// Pool token accounts
const POOL_SOL_ACCOUNT = new PublicKey('7xXdF9GUs3T8kCsfLkaQ72fJtu137vwzQAyRd9zE7dHS');
const PROGRAM_YOT_ACCOUNT = new PublicKey('BtHDQ6QwAffeeGftkNQK8X22n7HfnX4dud5vVsPZdqzE');
const PROGRAM_YOS_ACCOUNT = new PublicKey('5eQTdriuNrWaVdbLiyKDPwakYjM9na6ctYbxauPxaqWz');

// Token mints
const SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');
const YOT_MINT = new PublicKey('2EmUMo6kgmospSja3FUpYT3Yrps2YjHJtU9oZohr5GPF');
const YOS_MINT = new PublicKey('GcsjAVWYaTce9cpFLm2eGhRjZauvtSP3z3iMrZsrMW8n');

// ---------------------- UTILITY ----------------------

function createSwapData(amountIn: bigint): Buffer {
  const buffer = Buffer.alloc(17);
  buffer[0] = 1; // Opcode: 1 = Swap
  const view = new DataView(buffer.buffer, buffer.byteOffset + 1, 8);
  view.setBigUint64(0, amountIn, true);
  return buffer;
}

// ---------------------- MAIN EXECUTOR ----------------------

export async function finalAttempt(connection: Connection, payerKeypair: Keypair) {
  const amountIn = BigInt(10_000_000); // 10 YOT (assuming 6 decimals)

  const instruction = new TransactionInstruction({
    programId: PROGRAM_ID,
    data: createSwapData(amountIn),
    keys: [
      // Signer and state
      { pubkey: payerKeypair.publicKey, isSigner: true, isWritable: true },
      { pubkey: PROGRAM_STATE, isSigner: false, isWritable: true },
      { pubkey: PROGRAM_AUTHORITY, isSigner: false, isWritable: false },
      { pubkey: POOL_AUTHORITY, isSigner: false, isWritable: false },

      // User and program token accounts
      { pubkey: USER_YOT_ACCOUNT, isSigner: false, isWritable: true },
      { pubkey: USER_YOS_ACCOUNT, isSigner: false, isWritable: true },
      { pubkey: POOL_SOL_ACCOUNT, isSigner: false, isWritable: true },
      { pubkey: PROGRAM_YOT_ACCOUNT, isSigner: false, isWritable: true },
      { pubkey: PROGRAM_YOS_ACCOUNT, isSigner: false, isWritable: true },

      // Mints
      { pubkey: SOL_MINT, isSigner: false, isWritable: false },
      { pubkey: YOT_MINT, isSigner: false, isWritable: false },
      { pubkey: YOS_MINT, isSigner: false, isWritable: false },

      // Programs
      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
      { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },
      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
    ]
  });

  const tx = new Transaction().add(instruction);

  console.log("Simulating swap transaction...");

  try {
    const txid = await sendAndConfirmTransaction(connection, tx, [payerKeypair], {
      skipPreflight: false,
      commitment: 'confirmed',
    });
    console.log("✅ Swap Transaction Success! TxID:", txid);
  } catch (err) {
    console.error("❌ Swap Transaction Failed:", err);
  }
}
