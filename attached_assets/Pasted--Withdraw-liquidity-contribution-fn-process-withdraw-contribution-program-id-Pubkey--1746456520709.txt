// Withdraw liquidity contribution
fn process_withdraw_contribution(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let user = next_account_info(accounts_iter)?;
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let liquidity_yot = next_account_info(accounts_iter)?;
    let user_yot = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    
    // Verify user is a signer
    if !user.is_signer {
        msg!("User must sign WithdrawContribution instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify liquidity contribution account
    let (expected_liq_contrib, _) = find_liquidity_contribution_address(user.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize contribution account
    let contribution = LiquidityContribution::try_from_slice(
        &liquidity_contribution_account.data.borrow()
    )?;
    
    // Verify user owns this contribution
    if contribution.user != *user.key {
        msg!("You don't own this liquidity contribution");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check if there's anything to withdraw
    if contribution.contributed_amount == 0 {
        msg!("No liquidity contribution to withdraw");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Find PDA for program authority
    let (program_authority, authority_bump) = Pubkey::find_program_address(
        &[b"authority"],
        program_id,
    );
    
    // Transfer liquidity back to user
    invoke_signed(
        &token_instruction::transfer(
            token_program.key,
            liquidity_yot.key,
            user_yot.key,
            &program_authority,
            &[],
            contribution.contributed_amount,
        )?,
        &[
            liquidity_yot.clone(),
            user_yot.clone(),
            token_program.clone(),
        ],
        &[&[b"authority", &[authority_bump]]],
    )?;
    
    // Reset contribution account (zero out everything)
    let mut zeroed_contribution = LiquidityContribution {
        user: *user.key,
        contributed_amount: 0,
        start_timestamp: 0,
        last_claim_time: 0,
        total_claimed_yos: contribution.total_claimed_yos, // keep track of total claimed
    };
    
    // Serialize the zeroed contribution data
    zeroed_contribution.serialize(&mut &mut liquidity_contribution_account.data.borrow_mut()[..])?;
    
    msg!("Liquidity contribution of {} YOT withdrawn successfully", contribution.contributed_amount);
    Ok(())
}