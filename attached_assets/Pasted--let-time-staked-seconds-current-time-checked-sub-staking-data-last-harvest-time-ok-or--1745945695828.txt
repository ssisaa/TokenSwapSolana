  let time_staked_seconds = current_time.checked_sub(staking_data.last_harvest_time)
        .ok_or(ProgramError::InvalidArgument)?;
    
    // CRITICAL FIX FOR DECIMAL OVERFLOW
    // Convert staking rate from basis points to decimal (12000 basis points = 0.00000125%)
    // We need much more precision here to avoid huge overflow
    let rate_decimal = (program_state.stake_rate_per_second as f64) / 1_000_000.0;
    
    // Calculate rewards in token units first (e.g., 3.5 YOS)
    let rewards_token_units = (staking_data.staked_amount as f64 / 1_000_000_000.0) * 
                             (time_staked_seconds as f64) * 
                             rate_decimal;
    
    // Convert token units to raw units for storage and transfer
    let raw_rewards = (rewards_token_units * 1_000_000_000.0) as u64;
    
    // Check rewards meet minimum threshold
    if raw_rewards < program_state.harvest_threshold {
        return Err(ProgramError::InsufficientFunds);
    }
    
    // Check if program has enough YOS tokens
    let program_yos_info = match spl_token::state::Account::unpack(&program_yos_token_account.data.borrow()) {
        Ok(token_account) => token_account,
        Err(error) => {
            msg!("Error unpacking program YOS token account: {:?}", error);
            return Err(ProgramError::InvalidAccountData);
        }
    };
    
    let program_yos_balance = program_yos_info.amount;
    
    if program_yos_balance < raw_rewards {
        return Err(ProgramError::InsufficientFunds);
    }
    
    // Update staking data
    staking_data.last_harvest_time = current_time;
    staking_data.total_harvested = staking_data.total_harvested.checked_add(raw_rewards)
        .ok_or(ProgramError::InvalidArgument)?;
    
    staking_data.serialize(&mut *user_staking_account.try_borrow_mut_data()?)?;
    
    // CRITICAL FIX FOR DECIMAL TRANSFER ISSUE:
    // REMOVED incorrect division by 10^9 - SPL tokens already account for decimals
    // Raw amount already has 9 decimal places (e.g., 10 YOS = 10,000,000,000 raw units)
    // Use the raw amount directly without division
    
    // Transfer YOS rewards to user (using the FULL raw amount)
    invoke_signed(
        &spl_token::instruction::transfer(
            token_program.key,
            program_yos_token_account.key,
            user_yos_token_account.key,
            program_authority.key,
            &[],
            raw_rewards, // FIXED: Use raw amount directly instead of dividing
        )?,
        &[
            program_yos_token_account.clone(),
            user_yos_token_account.clone(),
            program_authority.clone(),
            token_program.clone(),
        ],
        &[&[b"authority", &[authority_bump]]],
    )?;
    
    // Log the proper decimal format for clarity
    msg!("Harvested {} YOS rewards (raw amount: {})", raw_rewards as f64 / 1_000_000_000.0, raw_rewards);
    
    Ok(())
}

// Update program parameters (admin only)
fn process_update_parameters(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    stake_rate_per_second: u64,
    harvest_threshold: u64,
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();
    
    // Get accounts
    let admin_account = next_account_info(account_info_iter)?;
    let program_state_account = next_account_info(account_info_iter)?;
    
    // Verify admin signature (mandatory signature verification)
    if !admin_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Get program state
    let mut program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify admin authority
    if program_state.admin != *admin_account.key {
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Update parameters
    program_state.stake_rate_per_second = stake_rate_per_second;
    program_state.harvest_threshold = harvest_threshold;
    
    // Save updated program state
    program_state.serialize(&mut *program_state_account.try_borrow_mut_data()?)?;
    
    msg!("Updated staking parameters: rate={}, threshold={}", 
         stake_rate_per_second, 
         harvest_threshold);
    
    Ok(())
}

// Helper function to calculate rewards
fn calculate_rewards(
    staked_amount: u64,
    time_staked_seconds: i64,
    stake_rate_per_second: u64
) -> u64 {
    // Convert staking rate from basis points to decimal
    let rate_decimal = (stake_rate_per_second as f64) / 10000.0;
    
    // Calculate rewards using compound interest formula (APY)
    // Formula: principal * ((1 + rate)^time - 1)
    let compound_rewards = (staked_amount as f64 * ((1.0 + rate_decimal).powf(time_staked_seconds as f64) - 1.0)) as u64;
    
    // Return the compound interest result
    compound_rewards
}