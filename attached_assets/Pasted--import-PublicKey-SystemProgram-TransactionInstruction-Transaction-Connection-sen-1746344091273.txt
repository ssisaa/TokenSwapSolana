
import {
  PublicKey,
  SystemProgram,
  TransactionInstruction,
  Transaction,
  Connection,
  sendAndConfirmTransaction,
} from "@solana/web3.js";
import { serialize } from "borsh";

// --------------------
// Class for Borsh schema
// --------------------
class InitializeInstruction {
  admin: Uint8Array;
  yot_mint: Uint8Array;
  yos_mint: Uint8Array;
  lp_contribution_rate: bigint;
  admin_fee_rate: bigint;
  yos_cashback_rate: bigint;
  swap_fee_rate: bigint;
  referral_rate: bigint;

  constructor(fields: {
    admin: Uint8Array;
    yot_mint: Uint8Array;
    yos_mint: Uint8Array;
    lp_contribution_rate: bigint;
    admin_fee_rate: bigint;
    yos_cashback_rate: bigint;
    swap_fee_rate: bigint;
    referral_rate: bigint;
  }) {
    Object.assign(this, fields);
  }
}

// --------------------
// Borsh Schema Mapping
// --------------------
const InitializeInstructionSchema = new Map([
  [
    InitializeInstruction,
    {
      kind: "struct",
      fields: [
        ["admin", [32]],
        ["yot_mint", [32]],
        ["yos_mint", [32]],
        ["lp_contribution_rate", "u64"],
        ["admin_fee_rate", "u64"],
        ["yos_cashback_rate", "u64"],
        ["swap_fee_rate", "u64"],
        ["referral_rate", "u64"],
      ],
    },
  ],
]);

// ---------------------------
// Main Instruction Generator
// ---------------------------
export async function initializeProgram({
  connection,
  payer,
  programId,
  admin,
  yotMint,
  yosMint,
  programState,
  programAuthority,
}: {
  connection: Connection;
  payer: any; // Keypair
  programId: PublicKey;
  admin: PublicKey;
  yotMint: PublicKey;
  yosMint: PublicKey;
  programState: PublicKey;
  programAuthority: PublicKey;
}) {
  console.log("Creating initialize instruction with:");
  console.log("Admin:", admin.toBase58());
  console.log("YOT Mint:", yotMint.toBase58());
  console.log("YOS Mint:", yosMint.toBase58());
  console.log("LP Contribution Rate: 2000");
  console.log("Admin Fee Rate: 10");
  console.log("YOS Cashback Rate: 300");
  console.log("Swap Fee Rate: 30");
  console.log("Referral Rate: 50");

  const enumDiscriminator = Buffer.from([0]); // enum variant for Initialize

  const payload = serialize(
    InitializeInstructionSchema,
    new InitializeInstruction({
      admin: admin.toBytes(),
      yot_mint: yotMint.toBytes(),
      yos_mint: yosMint.toBytes(),
      lp_contribution_rate: BigInt(2000),
      admin_fee_rate: BigInt(10),
      yos_cashback_rate: BigInt(300),
      swap_fee_rate: BigInt(30),
      referral_rate: BigInt(50),
    })
  );

  const instructionData = Buffer.concat([enumDiscriminator, payload]);

  const keys = [
    { pubkey: payer.publicKey, isSigner: true, isWritable: true },
    { pubkey: programState, isSigner: false, isWritable: true },
    { pubkey: programAuthority, isSigner: false, isWritable: false },
    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
    { pubkey: PublicKey.findProgramAddressSync([Buffer.from("SysvarRent111111111111111111111111111111111"), programId])[0], isSigner: false, isWritable: false },
  ];

  const ix = new TransactionInstruction({
    programId,
    keys,
    data: instructionData,
  });

  const tx = new Transaction().add(ix);
  const txSig = await sendAndConfirmTransaction(connection, tx, [payer]);

  console.log("Transaction Signature:", txSig);
}
