        yot_mint,
        yos_mint,
        lp_contribution_rate,
        admin_fee_rate,
        yos_cashback_rate,
        swap_fee_rate,
        referral_rate,
    };
    
    msg!("Initialized program state:");
    msg!("Admin: {}", admin);
    msg!("YOT mint: {}", yot_mint);
    msg!("YOS mint: {}", yos_mint);
    msg!("LP contribution rate: {}", lp_contribution_rate);
    msg!("Admin fee rate: {}", admin_fee_rate);
    msg!("YOS cashback rate: {}", yos_cashback_rate);
    msg!("Swap fee rate: {}", swap_fee_rate);
    msg!("Referral rate: {}", referral_rate);
    
    // Serialize and store program state
    program_state.serialize(&mut &mut program_state_account.data.borrow_mut()[..])?;
    
    Ok(())
}

// Process swap instruction implementation (simplified for brevity)
fn process_swap(
    _program_id: &Pubkey,
    _accounts: &[AccountInfo],
    _amount_in: u64,
    _min_amount_out: u64,
) -> ProgramResult {
    // Simplified implementation to focus on the new buy_and_distribute functionality
    msg!("Swap functionality not fully implemented in this version");
    Ok(())
}

// Close program implementation (admin only)
fn process_close_program(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    let admin_account = next_account_info(accounts_iter)?;
    let program_state_account = next_account_info(accounts_iter)?;
    
    // Verify admin signature
    if !admin_account.is_signer {
        msg!("Admin must sign CloseProgram instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify program state PDA
    let (expected_program_state, _) = find_program_state_address(program_id);
    if expected_program_state != *program_state_account.key {
        msg!("Invalid program state account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize program state
    let program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify admin authorization
    if program_state.admin != *admin_account.key {
        msg!("Only the admin can close the program");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Transfer lamports from program state account to admin
    let lamports = program_state_account.lamports();
    **program_state_account.lamports.borrow_mut() = 0;
    **admin_account.lamports.borrow_mut() += lamports;
    
    // Clear account data
    program_state_account.data.borrow_mut().fill(0);
    
    msg!("Program closed successfully");
    Ok(())
}

// Update program parameters (admin only)
fn process_update_parameters(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    lp_contribution_rate: u64,
    admin_fee_rate: u64,
    yos_cashback_rate: u64,
    swap_fee_rate: u64,
    referral_rate: u64,
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    let admin_account = next_account_info(accounts_iter)?;
    let program_state_account = next_account_info(accounts_iter)?;
    
    // Verify admin signature
    if !admin_account.is_signer {
        msg!("Admin must sign UpdateParameters instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify program state PDA
    let (expected_program_state, _) = find_program_state_address(program_id);
    if expected_program_state != *program_state_account.key {
        msg!("Invalid program state account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize program state
    let mut program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify admin authorization
    if program_state.admin != *admin_account.key {
        msg!("Only the admin can update parameters");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Validate parameters (basic validation only)
    let total_deductions = lp_contribution_rate + admin_fee_rate + yos_cashback_rate + swap_fee_rate + referral_rate;
    if total_deductions > 10000 {
        msg!("Total of all rates cannot exceed 100% (10000 basis points)");
        return Err(ProgramError::InvalidArgument);
    }
    
    // Update program state
    program_state.lp_contribution_rate = lp_contribution_rate;
    program_state.admin_fee_rate = admin_fee_rate;
    program_state.yos_cashback_rate = yos_cashback_rate;
    program_state.swap_fee_rate = swap_fee_rate;
    program_state.referral_rate = referral_rate;
    
    // Serialize updated program state
    program_state.serialize(&mut &mut program_state_account.data.borrow_mut()[..])?;
    
    msg!("Parameters updated successfully");
    Ok(())
}

// Buy and distribute YOT tokens with liquidity contribution and YOS cashback
// Implements buy_and_distribute from the Anchor smart contract
fn process_buy_and_distribute(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    amount: u64,
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let user = next_account_info(accounts_iter)?;
    let vault_yot = next_account_info(accounts_iter)?;
    let user_yot = next_account_info(accounts_iter)?;
    let liquidity_yot = next_account_info(accounts_iter)?;
    let yos_mint = next_account_info(accounts_iter)?;
    let user_yos = next_account_info(accounts_iter)?;
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;
    let rent_sysvar = next_account_info(accounts_iter)?;
    
    // Verify user is a signer
    if !user.is_signer {
        msg!("User must sign BuyAndDistribute instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Get program state to access rates
    let program_state_account = next_account_info(accounts_iter)?;
    let (expected_program_state, _) = find_program_state_address(program_id);
    if expected_program_state != *program_state_account.key {
        msg!("Invalid program state account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    let program_state = ProgramState::try_from_slice(&program_state_account.data.borrow())?;
    
    // Verify mint addresses
    if program_state.yos_mint != *yos_mint.key {
        msg!("Invalid YOS mint address");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Calculate distribution amounts using rates from program state
    // Default: 75% to user, 20% to liquidity, 5% to YOS cashback
    let liquidity_amount = (amount * program_state.lp_contribution_rate) / 10000; // 20%
    let cashback_amount = (amount * program_state.yos_cashback_rate) / 10000;     // 5%
    let user_amount = amount - liquidity_amount - cashback_amount;                // 75%
    
    msg!("Distribution amounts:");
    msg!("Total: {}", amount);
    msg!("User portion: {}", user_amount);
    msg!("Liquidity portion: {}", liquidity_amount);
    msg!("YOS cashback: {}", cashback_amount);
    
    // Check and initialize liquidity contribution account if needed
    let (expected_liq_contrib, liq_contrib_bump) = find_liquidity_contribution_address(user.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Initialize liquidity contribution account if it doesn't exist
    if liquidity_contribution_account.data_is_empty() {
        msg!("Creating new liquidity contribution account");
        let space = 32 + 8 + 8 + 8 + 8; // pubkey + 4 u64/i64 fields
        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(space);
        
        invoke_signed(
            &system_instruction::create_account(
                user.key,
                liquidity_contribution_account.key,
                rent_lamports,
                space as u64,
                program_id,
            ),
            &[
                user.clone(),
                liquidity_contribution_account.clone(),
                system_program.clone(),
            ],
            &[&[b"liq", user.key.as_ref(), &[liq_contrib_bump]]],
        )?;
    }
    
    // Update liquidity contribution account
    let mut contribution = if liquidity_contribution_account.data_len() > 0 {
        LiquidityContribution::try_from_slice(&liquidity_contribution_account.data.borrow())?
    } else {
        LiquidityContribution::default()
    };
    
    let clock = Clock::get()?;
    let now = clock.unix_timestamp;
    
    contribution.user = *user.key;
    contribution.contributed_amount += liquidity_amount;
    if contribution.start_timestamp == 0 {
        contribution.start_timestamp = now;
    }
    if contribution.last_claim_time == 0 {
        contribution.last_claim_time = now;
    }
    
    // Serialize the updated contribution data
    contribution.serialize(&mut &mut liquidity_contribution_account.data.borrow_mut()[..])?;
    
    // Transfer 75% to user (if needed)
    if user_amount > 0 {
        invoke(
            &token_instruction::transfer(
                token_program.key,
                vault_yot.key,
                user_yot.key,
                user.key,
                &[],
                user_amount,
            )?,
            &[
                vault_yot.clone(),
                user_yot.clone(),
                user.clone(),
                token_program.clone(),
            ],
        )?;
    }
    
    // Transfer 20% to liquidity pool
    if liquidity_amount > 0 {
        invoke(
            &token_instruction::transfer(
                token_program.key,
                vault_yot.key,
                liquidity_yot.key,
                user.key,
                &[],
                liquidity_amount,
            )?,
            &[
                vault_yot.clone(),
                liquidity_yot.clone(),
                user.clone(),
                token_program.clone(),
            ],
        )?;
    }
    
    // Find PDA for mint authority
    let (mint_authority, mint_authority_bump) = Pubkey::find_program_address(
        &[b"authority"],
        program_id,
    );
    
    // Mint 5% YOS as cashback
    if cashback_amount > 0 {
        invoke_signed(
            &token_instruction::mint_to(
                token_program.key,
                yos_mint.key,
                user_yos.key,
                &mint_authority,
                &[],
                cashback_amount,
            )?,
            &[
                yos_mint.clone(),
                user_yos.clone(),
                token_program.clone(),
            ],
            &[&[b"authority", &[mint_authority_bump]]],
        )?;
    }
    
    msg!("Buy and distribute completed successfully");
    Ok(())
}

// Auto-distribute weekly YOS rewards based on liquidity contribution
// This can be called by anyone on behalf of a user after the 7-day waiting period
fn process_claim_weekly_reward(
    program_id: &Pubkey, 
    accounts: &[AccountInfo]
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let caller = next_account_info(accounts_iter)?; // This could be any caller (admin, cron job, or user themselves)
    let user_key = next_account_info(accounts_iter)?; // The user who will receive the rewards
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let yos_mint = next_account_info(accounts_iter)?;
    let user_yos = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    
    // Verify caller is a signer
    if !caller.is_signer {
        msg!("Caller must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify liquidity contribution account belongs to the user
    let (expected_liq_contrib, _) = find_liquidity_contribution_address(user_key.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account for this user");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize contribution account
    let mut contribution = LiquidityContribution::try_from_slice(
        &liquidity_contribution_account.data.borrow()
    )?;
    
    // Verify the contribution belongs to the specified user
    if contribution.user != *user_key.key {
        msg!("Contribution account doesn't match the specified user");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check if contribution amount is valid
    if contribution.contributed_amount == 0 {
        msg!("No liquidity contribution to distribute rewards from");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check 7-day waiting period
    let clock = Clock::get()?;
    let now = clock.unix_timestamp;
    let elapsed = now - contribution.last_claim_time;
    
    const SECONDS_PER_WEEK: i64 = 604800; // 7 days
    if elapsed < SECONDS_PER_WEEK {
        msg!("Too early to distribute rewards. Must wait 7 days between distributions.");
        msg!("Last distribution: {}, Now: {}, Elapsed: {}/{} seconds", 
            contribution.last_claim_time, now, elapsed, SECONDS_PER_WEEK);
        return Err(ProgramError::InvalidInstructionData);
    }
    
    // Calculate weekly reward (1/52 of yearly reward - 100% APR)
    // 100% APR means weekly rate is ~1.92%
    let weekly_reward = (contribution.contributed_amount * 192) / 10000; // 1.92%
    msg!("Calculating weekly reward: {} * 1.92% = {}", 
        contribution.contributed_amount, weekly_reward);
    
    // Find PDA for mint authority
    let (mint_authority, mint_authority_bump) = Pubkey::find_program_address(
        &[b"authority"],
        program_id,
    );
    
    // Mint YOS rewards directly to user's account
    invoke_signed(
        &token_instruction::mint_to(
            token_program.key,
            yos_mint.key,
            user_yos.key,
            &mint_authority,
            &[],
            weekly_reward,
        )?,
        &[
            yos_mint.clone(),
            user_yos.clone(),
            token_program.clone(),
        ],
        &[&[b"authority", &[mint_authority_bump]]],
    )?;
    
    // Update contribution record
    contribution.last_claim_time = now;
    contribution.total_claimed_yos += weekly_reward;
    
    // Serialize the updated contribution data
    contribution.serialize(&mut &mut liquidity_contribution_account.data.borrow_mut()[..])?;
    
    msg!("Weekly reward of {} YOS automatically distributed to user {}", weekly_reward, user_key.key);
    Ok(())
}

// Withdraw liquidity contribution
fn process_withdraw_contribution(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    
    // Parse accounts
    let user = next_account_info(accounts_iter)?;
    let liquidity_contribution_account = next_account_info(accounts_iter)?;
    let liquidity_yot = next_account_info(accounts_iter)?;
    let user_yot = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;
    
    // Verify user is a signer
    if !user.is_signer {
        msg!("User must sign WithdrawContribution instruction");
        return Err(ProgramError::MissingRequiredSignature);
    }
    
    // Verify liquidity contribution account
    let (expected_liq_contrib, _) = find_liquidity_contribution_address(user.key, program_id);
    if expected_liq_contrib != *liquidity_contribution_account.key {
        msg!("Invalid liquidity contribution account");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Deserialize contribution account
    let contribution = LiquidityContribution::try_from_slice(
        &liquidity_contribution_account.data.borrow()
    )?;
    
    // Verify user owns this contribution
    if contribution.user != *user.key {
        msg!("You don't own this liquidity contribution");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Check if there's anything to withdraw
    if contribution.contributed_amount == 0 {
        msg!("No liquidity contribution to withdraw");
        return Err(ProgramError::InvalidAccountData);
    }
    
    // Find PDA for program authority
    let (program_authority, authority_bump) = Pubkey::find_program_address(
        &[b"authority"],
        program_id,
    );
    
    // Transfer liquidity back to user
    invoke_signed(
        &token_instruction::transfer(
            token_program.key,
            liquidity_yot.key,
            user_yot.key,
            &program_authority,
            &[],
            contribution.contributed_amount,
        )?,
        &[
            liquidity_yot.clone(),
            user_yot.clone(),
            token_program.clone(),
        ],
        &[&[b"authority", &[authority_bump]]],
    )?;
    
    // Reset contribution account (zero out everything)
    let mut zeroed_contribution = LiquidityContribution {
        user: *user.key,
        contributed_amount: 0,
        start_timestamp: 0,
        last_claim_time: 0,
        total_claimed_yos: contribution.total_claimed_yos, // keep track of total claimed
    };
    
    // Serialize the zeroed contribution data
    zeroed_contribution.serialize(&mut &mut liquidity_contribution_account.data.borrow_mut()[..])?;
    
    msg!("Liquidity contribution of {} YOT withdrawn successfully", contribution.contributed_amount);
    Ok(())
}